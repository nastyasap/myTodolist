{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","app/store.ts","features/login/selectors.ts","features/TodolistsList/selectors.ts","features/TodolistsList/Todolist/Task/selectors.ts","features/TodolistsList/TodolistsList.tsx","app/selectors.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","utils/switchMode.tsx","app/App.tsx","utils/theme.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","ResultCodeStatuses","handleServerNetworkError","dispatch","message","setAppErrorAC","error","setAppStatusAC","status","handleServerAppError","messages","length","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","clearDataLogoutAC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTasksTC","tasks","items","removeTaskTC","changeTaskEntityStatusAC","todoId","addTaskTC","success","item","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","index","findIndex","entityStatus","removeTodolistTC","fetchTodolistsTC","todolists","forEach","tl","addTodolistTC","todolist","splice","todoListId","unshift","tasksReducer","todos","changeTodoEntityStatusAC","changeTodolistTitleTC","changeTodolistFilterAC","filter","map","todolistsReducer","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","style","marginBottom","display","alignItems","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","placeholder","helperText","IconButton","color","size","onClick","disabled","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","justifyContent","className","Checkbox","Delete","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","width","textAlign","removeTodolist","margin","Button","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","useSelector","window","selectIsLoggedIn","selectTodolists","selectTasks","TodolistsList","todolistSelectors","taskSelectors","authSelectors","useDispatch","useEffect","thunk","changeStatus","newTitle","addTodolist","Grid","container","paddingTop","flexDirection","spacing","allTodolistTasks","Paper","padding","to","selectStatus","selectIsInitialized","selectError","Alert","forwardRef","ref","elevation","ErrorSnackbar","appSelectors","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","FormControl","marginTop","href","target","handleSubmit","FormGroup","getFieldProps","touched","type","FormControlLabel","control","MaterialUISwitch","styled","Switch","theme","height","transform","backgroundImage","encodeURIComponent","opacity","backgroundColor","palette","mode","content","position","left","top","backgroundRepeat","backgroundPosition","borderRadius","App","setMode","colorMode","useMemo","toggleColorMode","prevMode","createTheme","primary","lime","secondary","purple","divider","text","grey","deepOrange","background","default","brown","paper","getDesignTokens","logoutHandler","ThemeProvider","CssBaseline","AppBar","Toolbar","Typography","LinearProgress","Container","fixed","path","element","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"igBA2EYA,EAOAC,E,iCCpEGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mEDNRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,IAIjIC,EAAU,SACbC,GACF,OAAOjB,EAASS,KAAmE,aAAcQ,IAF5FD,EAAU,WAKf,OAAOhB,EAASW,OAAqB,eALhCK,EAAU,WAQf,OAAOhB,EAASO,IAAgE,a,SA4B5ElB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KE9EL,ICsJF4B,EDtJQC,EAA2B,SAACC,EAAoCC,GACzED,EAASE,EAAc,CAACC,MAAOF,KAC/BD,EAASI,EAAe,CAACC,OAAQ,aAGxBC,EAAuB,SAAIN,EAAoBH,GACxDG,EAASE,EAAcL,EAAKU,SAASC,OAAS,CAACL,MAAON,EAAKU,SAAS,IAAM,CAACJ,MAAO,yBAClFH,EAASI,EAAe,CAACC,OAAQ,a,QEFxBI,EAAUC,YAEpB,eAFoC,uCAEpB,WAAOC,EAAOC,GAAd,eAAAC,EAAA,6DACfD,EAASZ,SAASI,EAAe,CAACC,OAAQ,aAD3B,kBAGOT,EAAce,GAHrB,UAIiB,KADtBG,EAHK,QAIHjB,KAAKkB,WAJF,wBAKPH,EAASZ,SAASI,EAAe,CAACC,OAAQ,eALnC,kCAQPC,EAAqBM,EAASZ,SAAUc,EAAIjB,MARrC,kBASAe,EAASI,gBAAgB,CAACC,OAAQH,EAAIjB,KAAKU,SAAUW,aAAcJ,EAAIjB,KAAKqB,gBAT5E,iEAYXnB,EAAyBa,EAASZ,SAAV,MAZb,kBAaJY,EAASI,gBAAgB,CAACC,OAAQ,CAAC,KAAMhB,SAAUiB,kBAAcC,KAb7D,0DAFoB,yDAmB1BC,EAAWV,YAAiB,gBAAD,uCAAkB,WAAOC,EAAOC,GAAd,eAAAC,EAAA,6DACtDD,EAASZ,SAASI,EAAe,CAACC,OAAQ,aADY,kBAGhCT,IAHgC,UAItB,KADtBkB,EAH4C,QAI1CjB,KAAKkB,WAJqC,wBAK9CH,EAASZ,SAASqB,MAClBT,EAASZ,SAASI,EAAe,CAACC,OAAQ,eANI,kCAS9CC,EAAqBM,EAASZ,SAAUc,EAAIjB,MATE,kBAUvCe,EAASI,gBAAgB,KAVc,iEAalDjB,EAAyBa,EAASZ,SAAV,MAb0B,kBAc3CY,EAASI,gBAAgB,KAdkB,0DAAlB,yDAmBlCM,EAAQC,YAAY,CACtBC,KAAM,OACNC,aAAc,CACVC,YAAY,GAEhBC,SAAU,CACNC,gBADM,SACUC,EAAOC,GACnBD,EAAMH,WAAaI,EAAOC,QAAQL,aAG1CM,cAAe,SAAAC,GACXA,EAAQC,QAAQzB,EAAQ0B,WAAW,SAACN,GAChCA,EAAMH,YAAa,KAEvBO,EAAQC,QAAQd,EAASe,WAAW,SAACN,GACjCA,EAAMH,YAAa,QAKlBU,EAAcd,EAAMe,QACnBT,EAAmBN,EAAMgB,QAAzBV,gBC5DDW,EAAkB7B,YAAiB,sBAAD,uCAAwB,WAAOC,EAAP,oBAAAE,EAAA,6DAAeb,EAAf,EAAeA,SAAf,SACjDJ,IADiD,OAC7DkB,EAD6D,OAEnE,IACgC,IAAxBA,EAAIjB,KAAKkB,WACTf,EAAS4B,EAAgB,CAACF,YAAY,KAEtCpB,EAAqBN,EAAUc,EAAIjB,MAEzC,MAAOM,GACLJ,EAAyBC,EAAUG,EAAMF,SATsB,2CAAxB,yDAczCqB,EAAQC,YAAY,CACtBC,KAAM,MACNC,aAAc,CACVpB,OAAQ,UACRF,MAAO,KACPqC,eAAe,GAEnBb,SAAU,CACNvB,eADM,SACSyB,EAAOC,GAClBD,EAAMxB,OAASyB,EAAOC,QAAQ1B,QAElCH,cAJM,SAIQ2B,EAAOC,GACjBD,EAAM1B,MAAQ2B,EAAOC,QAAQ5B,QAGrC6B,cAAe,SAAAC,GACXA,EAAQC,QAAQK,EAAgBJ,WAAW,SAACN,GACxCA,EAAMW,eAAgB,QAWrBC,EAAanB,EAAMe,QACzB,EAAwCf,EAAMgB,QAAvClC,EAAP,EAAOA,eAAgBF,EAAvB,EAAuBA,cFnCjBwC,EAAehC,YAAiB,qBAAD,uCAAuB,WAAOjB,EAAoBmB,GAA3B,iBAAAC,EAAA,6DAC/DD,EAASZ,SAASI,EAAe,CAACC,OAAQ,aADqB,SAE7CnB,EAAsBO,GAFuB,cAEzDqB,EAFyD,gBAIrD6B,EAAQ7B,EAAIjB,KAAK+C,MACvBhC,EAASZ,SAASI,EAAe,CAACC,OAAQ,eALiB,kBAMpD,CAACsC,QAAOlD,eAN4C,kCAQ3DM,EAAyBa,EAASZ,SAAU,KAAMC,SARS,0DAAvB,yDAY/B4C,EAAenC,YAAiB,qBAAD,uCAAuB,WAAOC,EAA+CC,GAAtD,SAAAC,EAAA,6DAC/DD,EAASZ,SAASI,EAAe,CAACC,OAAQ,aAC1CO,EAASZ,SAAS8C,GAAyB,CAACzC,OAAQ,UAAWX,OAAQiB,EAAMjB,OAAQqD,OAAQpC,EAAMlB,cAFpC,kBAIrDP,EAAwByB,EAAMlB,WAAYkB,EAAMjB,QAJK,cAK3DkB,EAASZ,SAASI,EAAe,CAACC,OAAQ,eALiB,kBAMpD,CAACX,OAAQiB,EAAMjB,OAAQD,WAAYkB,EAAMlB,aANW,gCAQ3DM,EAAyBa,EAASZ,SAAU,KAAMC,SARS,yDAAvB,yDAY/B+C,EAAYtC,YAAiB,kBAAD,uCAAoB,WAAOC,EAAP,sBAAAE,EAAA,6DACzDb,EADyD,EACzDA,SACAgB,EAFyD,EAEzDA,gBAEAhB,EAASI,EAAe,CAACC,OAAQ,aAJwB,kBAMnCnB,EAAwByB,EAAMlB,WAAYkB,EAAMvB,OANb,WAM/C0B,EAN+C,QAO7CjB,KAAKkB,aAAejB,EAAmBmD,QAPM,wBAQjDjD,EAASI,EAAe,CAACC,OAAQ,eARgB,kBAS1CS,EAAIjB,KAAKA,KAAKqD,MAT4B,eAWjD5C,EAAqBN,EAAUc,EAAIjB,MAXc,kBAY1CmB,EAAgB,KAZ0B,iEAerDjB,EAAyBC,EAAU,KAAMC,SAfY,kBAgB9Ce,EAAgB,KAhB8B,0DAApB,yDAoB5BmC,EAAezC,YAAiB,qBAAD,uCAAuB,WAAOC,EAAuFC,GAA9F,qBAAAC,EAAA,yDACzDgB,EAAQjB,EAASwC,WACjBC,EAAOxB,EAAMc,MAAMhC,EAAMlB,YAAY6D,MAAK,SAAAC,GAAC,OAAIA,EAAEjE,KAAOqB,EAAMjB,UAFL,yCAIpDkB,EAASI,gBAAgB,gCAJ2B,cAOzDwC,EAPyD,aAQ3DC,SAAUJ,EAAKI,SACfC,YAAaL,EAAKK,YAClBC,SAAUN,EAAKM,SACfC,UAAWP,EAAKO,UAChBxE,MAAOiE,EAAKjE,MACZiB,OAAQgD,EAAKhD,QACVM,EAAMkD,aAEbjD,EAASZ,SAASI,EAAe,CAACC,OAAQ,aAhBqB,kBAkBzCnB,EAAwByB,EAAMlB,WAAYkB,EAAMjB,OAAQ8D,GAlBf,WAkBrD1C,EAlBqD,QAmBnDjB,KAAKkB,aAAejB,EAAmBmD,QAnBY,wBAoBvDrC,EAASZ,SAASI,EAAe,CAACC,OAAQ,eApBa,kBAqBhD,CAACM,UArB+C,eAuBvDL,EAAqBM,EAASZ,SAAUc,EAAIjB,MAvBW,kBAwBhDe,EAASI,gBAAgB,KAxBuB,iEA2B3DjB,EAAyBa,EAASZ,SAAU,KAAMC,SA3BS,kBA4BpDW,EAASI,gBAAgB,KA5B2B,0DAAvB,yDAkC/BM,EAAQC,YAAY,CAC7BC,KAAM,QACNC,aAnFiC,GAoFjCE,SAAU,CACNmB,yBADM,SACmBjB,EAAOC,GAC5B,IAAMa,EAAQd,EAAMC,EAAOC,QAAQgB,QAC7Be,EAAQnB,EAAMoB,WAAU,SAAAR,GAAC,OAAIA,EAAEjE,KAAOwC,EAAOC,QAAQrC,UACvDoE,GAAS,IACTnB,EAAMmB,GAAOE,aAAelC,EAAOC,QAAQ1B,UAIvD2B,cAAe,SAACC,GACZA,EAAQC,QAAQ+B,GAAiB9B,WAAW,SAACN,EAAOC,UACzCD,EAAMC,EAAOC,QAAQzC,OAEhC2C,EAAQC,QAAQgC,GAAiB/B,WAAW,SAACN,EAAOC,GAChDA,EAAOC,QAAQoC,UAAUC,SAAQ,SAAAC,GAAE,OAAIxC,EAAMwC,EAAG/E,IAAM,SAE1D2C,EAAQC,QAAQb,IAAmB,SAACQ,EAAOC,GACvC,MAAO,MAEXG,EAAQC,QAAQoC,GAAcnC,WAAW,SAACN,EAAOC,GAC7CD,EAAMC,EAAOC,QAAQwC,SAASjF,IAAM,MAExC2C,EAAQC,QAAQQ,EAAaP,WAAW,SAACN,EAAOC,GACxCA,EAAOC,UACPF,EAAMC,EAAOC,QAAQtC,YAAcqC,EAAOC,QAAQY,UAG1DV,EAAQC,QAAQW,EAAaV,WAAW,SAACN,EAAOC,GAC5C,GAAIA,EAAOC,QAAS,CAChB,IAAM+B,EAAQjC,EAAMC,EAAOC,QAAQtC,YAAYsE,WAAU,SAAAR,GAAC,OAAIA,EAAEjE,KAAOwC,EAAOC,QAASrC,UACnFoE,GAAS,GACTjC,EAAMC,EAAOC,QAAQtC,YAAY+E,OAAOV,EAAO,OAI3D7B,EAAQC,QAAQc,EAAUb,WAAW,SAACN,EAAOC,GACrCA,EAAOC,SACPF,EAAMC,EAAOC,QAAQ0C,YAAYC,QAAQ5C,EAAOC,YAGxDE,EAAQC,QAAQiB,EAAahB,WAAW,SAACN,EAAOC,GAC5C,IAAMa,EAAQd,EAAMC,EAAOC,QAAQpB,MAAMlB,YACnCqE,EAAQnB,EAAMoB,WAAU,SAAAR,GAAC,OAAIA,EAAEjE,KAAOwC,EAAOC,QAAQpB,MAAMjB,UAC7DoE,GAAS,IACTnB,EAAMmB,GAAN,2BAAmBnB,EAAMmB,IAAWhC,EAAOC,QAAQpB,MAAMkD,oBAM5Dc,EAAerD,EAAMe,QAG9BS,GACAxB,EAAMgB,QADNQ,0B,SAIChD,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KGlJE,IAAMoE,GAAmBxD,YAAiB,6BAAD,uCAA+B,WAAOC,EAAP,wBAAAE,EAAA,6DAC3Eb,EAD2E,EAC3EA,SACAgB,EAF2E,EAE3EA,gBAEAhB,EAASI,EAAe,CAACC,OAAQ,aAJ0C,kBAMrDnB,IANqD,cAMjE4B,EANiE,OAOvEd,EAASI,EAAe,CAACC,OAAQ,gBAC3BuE,EAAQ,CAACT,UAAWrD,EAAIjB,OACxBsE,UAAUC,SAAQ,SAAAC,GAAE,OAAIrE,EAAS0C,EAAa2B,EAAG/E,QATgB,kBAUhEsF,GAVgE,yCAYvE7E,EAAyBC,EAAU,KAAMC,SAZ8B,kBAahEe,EAAgB,KAbgD,0DAA/B,yDAgBnCiD,GAAmBvD,YAAiB,6BAAD,uCAA+B,WAAOC,EAAP,oBAAAE,EAAA,6DAC3Eb,EAD2E,EAC3EA,SACAgB,EAF2E,EAE3EA,gBAEAhB,EAASI,EAAe,CAACC,OAAQ,aACjCL,EAAS6E,GAAyB,CAACxE,OAAQ,UAAWf,GAAIqB,EAAMlB,cALW,kBAOjEP,EAA4ByB,EAAMlB,YAP+B,cAQvEO,EAASI,EAAe,CAACC,OAAQ,eARsC,kBAShE,CAACf,GAAIqB,EAAMlB,aATqD,yCAWvEM,EAAyBC,EAAU,KAAMC,SAX8B,kBAYhEe,EAAgB,KAZgD,0DAA/B,yDAenCsD,GAAgB5D,YAAiB,0BAAD,uCAA4B,WAAOC,EAAP,sBAAAE,EAAA,6DACrEb,EADqE,EACrEA,SACAgB,EAFqE,EAErEA,gBAEAhB,EAASI,EAAe,CAACC,OAAQ,aAJoC,kBAM/CnB,EAA4ByB,EAAMvB,OANa,UAOrC,KADtB0B,EAN2D,QAOzDjB,KAAKkB,WAPoD,wBAQ7Df,EAASI,EAAe,CAACC,OAAQ,eAR4B,kBAStD,CAACkE,SAAUzD,EAAIjB,KAAKA,KAAKqD,OAT6B,eAW7D5C,EAAqBN,EAAUc,EAAIjB,MAX0B,kBAYtDmB,EAAiB,KAZqC,iEAejEjB,EAAyBC,EAAU,KAAMC,SAfwB,kBAgB1De,EAAiB,KAhByC,0DAA5B,yDAoBhC8D,GAAwBpE,YAAiB,kCAAD,uCAAoC,WAAOC,EAAP,sBAAAE,EAAA,6DACrFb,EADqF,EACrFA,SACAgB,EAFqF,EAErFA,gBAEAhB,EAASI,EAAe,CAACC,OAAQ,aAJoD,kBAM/DnB,EAA4ByB,EAAMrB,GAAIqB,EAAMvB,OANmB,UAOrD,KADtB0B,EAN2E,QAOzEjB,KAAKkB,WAPoE,wBAQ7Ef,EAASI,EAAe,CAACC,OAAQ,eAR4C,kBAStE,CAACf,GAAIqB,EAAMrB,GAAIF,MAAOuB,EAAMvB,QAT0C,eAW7EkB,EAAqBN,EAAUc,EAAIjB,MAX0C,kBAYtEmB,EAAgB,KAZsD,iEAejFjB,EAAyBC,EAAU,KAAMC,SAfwC,kBAgB1Ee,EAAgB,KAhB0D,0DAApC,yDAqB/CM,GAAQC,YAAY,CACtBC,KAAM,YACNC,aAAc,GACdE,SAAU,CACNoD,uBADM,SACiBlD,EAAOC,GAC1B,IAAMgC,EAAQjC,EAAMkC,WAAU,SAAAM,GAAE,OAAIA,EAAG/E,KAAOwC,EAAOC,QAAQzC,MAC7DuC,EAAMiC,GAAOkB,OAASlD,EAAOC,QAAQiD,QAEzCH,yBALM,SAKmBhD,EAAOC,GAC5B,IAAMgC,EAAQjC,EAAMkC,WAAU,SAAAM,GAAE,OAAIA,EAAG/E,KAAOwC,EAAOC,QAAQzC,MAC7DuC,EAAMiC,GAAOE,aAAelC,EAAOC,QAAQ1B,QAE/CgB,kBATM,WAUF,MAAO,KAGfW,cAAe,SAAAC,GACXA,EAAQC,QAAQgC,GAAiB/B,WAAW,SAACN,EAAOC,GAChD,OAAOA,EAAOC,QAAQoC,UAAUc,KAAI,SAAAZ,GAAE,kCAASA,GAAT,IAAaW,OAAQ,MAAOhB,aAAc,eAEpF/B,EAAQC,QAAQ+B,GAAiB9B,WAAW,SAACN,EAAOC,GAChD,IAAMgC,EAAQjC,EAAMkC,WAAU,SAAAM,GAAE,OAAIA,EAAG/E,KAAOwC,EAAOC,QAAQzC,MACzDwE,GAAS,GACTjC,EAAM2C,OAAOV,EAAO,MAG5B7B,EAAQC,QAAQoC,GAAcnC,WAAW,SAACN,EAAOC,GAC7CD,EAAM6C,QAAN,2BAAkB5C,EAAOC,QAAQwC,UAAjC,IAA2CS,OAAQ,MAAOhB,aAAc,aAE5E/B,EAAQC,QAAQ4C,GAAsB3C,WAAW,SAACN,EAAOC,GACrD,IAAMgC,EAAQjC,EAAMkC,WAAU,SAAAM,GAAE,OAAIA,EAAG/E,KAAOwC,EAAOC,QAAQzC,MAC7DuC,EAAMiC,GAAO1E,MAAQ0C,EAAOC,QAAQ3C,YAKnC8F,GAAmB5D,GAAMe,QAG/B,GAEHf,GAAMgB,QADNyC,GADG,GACHA,uBAAwBF,GADrB,GACqBA,yBAA0BxD,GAD/C,GAC+CA,kB,sCC7GzC8D,GAAcC,IAAMC,MAAK,SAAUC,GAC5C,MAAwBC,mBAAS,IAAjC,mBAAKnG,EAAL,KAAYoG,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,mBAAKpF,EAAL,KAAYsF,EAAZ,KAEMC,EAAU,WACS,KAAjBtG,EAAMuG,QACNL,EAAMI,QAAQtG,GACdoG,EAAS,KAETC,EAAS,sBAiBjB,OAAO,uBAAKG,MAAO,CAACC,aAAc,OAAQC,QAAS,OAAQC,WAAY,UAAhE,UACH,eAACC,GAAA,EAAD,CAAWC,QAAQ,WACR9F,QAASA,EACT+F,MAAO9G,EACP+G,SAjBS,SAACC,GACrBZ,EAASY,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVjG,GACAsF,EAAS,MAEM,KAAfW,EAAEG,UACFb,KAUOc,MAAOlB,EAAMmB,YACbC,WAAYvG,IAEvB,eAACwG,GAAA,EAAD,CAAYC,MAAM,YAAYC,KAAM,QAASC,QAASpB,EAASqB,SAAUzB,EAAMyB,SAA/E,SACI,eAACC,GAAA,EAAD,CAAQC,SAAU,oB,SCrCjBC,GAAe9B,IAAMC,MAAK,SAAUC,GAC7C,MAA8BC,oBAAS,GAAvC,mBAAK4B,EAAL,KAAeC,EAAf,KACA,EAAwB7B,mBAASD,EAAMY,OAAvC,mBAAK9G,EAAL,KAAYoG,EAAZ,KAcA,OAAO2B,EACD,eAACnB,GAAA,EAAD,CAAWE,MAAO9G,EAAO+G,SALX,SAACC,GACjBZ,EAASY,EAAEC,cAAcH,QAIyBD,QAAS,WAAYoB,WAAS,EAACC,OAT5D,WACrBF,GAAY,GACZ9B,EAAMa,SAAS/G,MAQb,uBAAMmI,cAda,WACrBjC,EAAMyB,SAAWK,GAAY,GAASA,GAAY,GAClD5B,EAASF,EAAMY,QAYb,SAAwCZ,EAAMY,W,oBCb3CsB,GAAOpC,IAAMC,MAAK,SAACC,GAC5B,IAAMmC,EAAiBC,uBAAY,kBAAMpC,EAAMqC,WAAWrC,EAAMjC,KAAK/D,GAAIgG,EAAM7F,cAAa,CAAC6F,EAAMjC,KAAK/D,GAAIgG,EAAM7F,aAE5GmI,EAAkBF,uBAAY,SAACtB,GACjC,IAAIyB,EAAiBzB,EAAEC,cAAcyB,QACrCxC,EAAMyC,iBAAiBzC,EAAMjC,KAAK/D,GAAIuI,EAAiB5J,EAAa+J,UAAY/J,EAAagK,IAAK3C,EAAM7F,cACzG,CAAC6F,EAAMjC,KAAK/D,GAAIgG,EAAM7F,aAEnByI,EAAuBR,uBAAY,SAACS,GACtC7C,EAAM8C,gBAAgB9C,EAAMjC,KAAK/D,GAAI6I,EAAU7C,EAAM7F,cACtD,CAAC6F,EAAMjC,KAAK/D,GAAIgG,EAAM7F,aAEzB,OAAO,uBACKmG,MAAO,CACHE,QAAS,OACTuC,eAAgB,gBAChBtC,WAAY,UAEhBuC,UAAWhD,EAAMjC,KAAKhD,SAAWpC,EAAa+J,UAAY,UAAY,GAN3E,UAOH,eAACO,GAAA,EAAD,CACIT,QAASxC,EAAMjC,KAAKhD,SAAWpC,EAAa+J,UAC5CpB,MAAM,UACNT,SAAUyB,EACVb,SAAsC,YAA5BzB,EAAMjC,KAAKW,eAGzB,eAACkD,GAAD,CAAcH,SAAsC,YAA5BzB,EAAMjC,KAAKW,aAA4BkC,MAAOZ,EAAMjC,KAAKjE,MAAO+G,SAAU+B,IAClG,eAACvB,GAAA,EAAD,CAAYG,QAASW,EAAgBV,SAAsC,YAA5BzB,EAAMjC,KAAKW,aAA1D,SACI,eAACwE,GAAA,EAAD,CAAQ5B,MAAO,gBAhBNtB,EAAMjC,KAAK/D,O,sBCEnBmJ,GAAWrD,IAAMC,MAAK,YAA+C,EAApCqD,KAAqC,IAApBpD,EAAmB,mBAExEqD,EAAUjB,uBAAY,SAACtI,GACzBkG,EAAMqD,QAAQvJ,EAAOkG,EAAMhG,MAC5B,CAACgG,EAAMqD,QAASrD,EAAMhG,KAKnBsJ,EAAsBlB,uBAAY,SAACtI,GACrCkG,EAAMsD,oBAAoBtD,EAAMhG,GAAIF,KACrC,CAACkG,EAAMhG,GAAIgG,EAAMsD,sBAEdC,EAAoBnB,uBAAY,kBAAMpC,EAAMwD,aAAa,MAAOxD,EAAMhG,MAAK,CAACgG,EAAMhG,GAAIgG,EAAMwD,eAC5FC,EAAuBrB,uBAAY,kBAAMpC,EAAMwD,aAAa,SAAUxD,EAAMhG,MAAK,CAACgG,EAAMhG,GAAIgG,EAAMwD,eAClGE,EAA0BtB,uBAAY,kBAAMpC,EAAMwD,aAAa,YAAaxD,EAAMhG,MAAK,CAACgG,EAAMhG,GAAIgG,EAAMwD,eAG1GG,EAAmB3D,EAAM3C,MAS7B,MAPqB,WAAjB2C,EAAMN,SACNiE,EAAmB3D,EAAM3C,MAAMqC,QAAO,SAAAzB,GAAC,OAAIA,EAAElD,SAAWpC,EAAagK,QAEpD,cAAjB3C,EAAMN,SACNiE,EAAmB3D,EAAM3C,MAAMqC,QAAO,SAAAzB,GAAC,OAAIA,EAAElD,SAAWpC,EAAa+J,cAGlE,uBAAKpC,MAAO,CAACsD,MAAO,cAAeC,UAAW,UAA9C,UACH,gCAAI,eAACjC,GAAD,CAAchB,MAAOZ,EAAMlG,MAAO+G,SAAUyC,EAC9B7B,SAAiC,YAAvBzB,EAAMtB,eAC9B,eAAC2C,GAAA,EAAD,CAAYI,SAAiC,YAAvBzB,EAAMtB,aAA4B8C,QAxBzC,WACnBxB,EAAM8D,eAAe9D,EAAMhG,KAuBvB,SACI,eAACkJ,GAAA,EAAD,CAAQ5B,MAAO,iBAGvB,eAACzB,GAAD,CAAaO,QAASiD,EAAS5B,SAAiC,YAAvBzB,EAAMtB,aAA4ByC,YAAa,UACxF,+BACKwC,EAAiBzI,OACdyI,EAAiBhE,KAAI,SAAA1B,GAAC,OAAI,eAACiE,GAAD,CAAiBnE,KAAME,EAAG9D,WAAY6F,EAAMhG,GACtCqI,WAAYrC,EAAMqC,WAClBS,gBAAiB9C,EAAM8C,gBACvBL,iBAAkBzC,EAAMyC,kBAHnBxE,EAAEjE,OAKrC,oBAAGsG,MAAO,CAACyD,OAAQ,QAAnB,wBAGV,uBAAKzD,MAAO,CAACE,QAAS,OAAQuC,eAAgB,iBAA9C,UACI,eAACiB,GAAA,EAAD,CACIzC,KAAM,QACNZ,QAAS,YACTW,MAAwB,QAAjBtB,EAAMN,OAAmB,YAAc,UAC9C8B,QAAS+B,EAJb,iBAMA,eAACS,GAAA,EAAD,CACIzC,KAAM,QACNZ,QAAS,YACTW,MAAwB,WAAjBtB,EAAMN,OAAsB,YAAc,UACjD8B,QAASiC,EAJb,oBAMA,eAACO,GAAA,EAAD,CACIzC,KAAM,QACNZ,QAAS,YACTW,MAAwB,cAAjBtB,EAAMN,OAAyB,YAAc,UACpD8B,QAASkC,EAJb,gC,sCC5ENO,GAAcC,aAAgB,CAChC7G,MAAOgC,EACPR,UAAWe,GACXuE,IAAKhH,EACLiH,KAAMtH,IAIGuH,GAAQC,YAAe,CAChCvH,QAASkH,GACTM,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAQ1DC,GAAyDC,IAItEC,OAAOR,MAAQA,G,aC/BFS,GAAmB,SAACvI,GAAD,OAA6BA,EAAM6H,KAAKhI,YCA3D2I,GAAkB,SAACxI,GAAD,OAA6BA,EAAMsC,WCArDmG,GAAc,SAACzI,GAAD,OAA6BA,EAAMc,OC0BjD4H,GAAqC,SAAC,GAAoB,IAAD,IAAlB7B,YAAkB,SAE5DvE,EAAY8F,GAA0CO,EAAkBH,iBACxE1H,EAAQsH,GAA+BQ,EAAcH,aACrD5I,EAAauI,GAAwBS,EAAcN,kBAEnDpK,EAAW2K,cAEjBC,qBAAU,WACN,IAAIlC,GAAShH,EAAb,CAGA,IAAMmJ,EAAQ3G,KACdlE,EAAS6K,MACV,IAEH,IAAMlD,EAAaD,uBAAY,SAAUpI,EAAYG,GACjD,IAAMoL,EAAQhI,EAAa,CAACnD,OAAQJ,EAAIG,eACxCO,EAAS6K,KACV,IAEGlC,EAAUjB,uBAAY,SAAUtI,EAAeK,GACjD,IAAMoL,EAAQ7H,EAAU,CAAC5D,QAAOK,eAChCO,EAAS6K,KACV,IAEGC,EAAepD,uBAAY,SAAUhI,EAAgBW,EAAsBZ,GAC7E,IAAMoL,EAAQ1H,EAAa,CAACzD,SAAQmE,YAAa,CAACxD,UAASZ,eAC3DO,EAAS6K,KACV,IAEGzC,EAAkBV,uBAAY,SAAUhI,EAAgBqL,EAAkBtL,GAC5E,IAAMoL,EAAQ1H,EAAa,CAACzD,SAAQmE,YAAa,CAACzE,MAAO2L,GAAWtL,eACpEO,EAAS6K,KACV,IAEG/B,EAAepB,uBAAY,SAAUxB,EAAyBzG,GAChE,IAAMqC,EAASiD,GAAuB,CAACzF,GAAIG,EAAYuF,OAAQkB,IAC/DlG,EAAS8B,KACV,IAEGsH,EAAiB1B,uBAAY,SAAUjI,GACzC,IAAMoL,EAAQ5G,GAAiB,CAACxE,eAChCO,EAAS6K,KACV,IAEGjC,EAAsBlB,uBAAY,SAAUpI,EAAYF,GAC1D,IAAMyL,EAAQ/F,GAAsB,CAACxF,KAAIF,UACzCY,EAAS6K,KACV,IAEGG,EAActD,uBAAY,SAACtI,GAC7B,IAAMyL,EAAQvG,GAAc,CAAClF,UAC7BY,EAAS6K,KACV,CAAC7K,IAGJ,OAAK0B,EAGE,uCACH,eAACuJ,GAAA,EAAD,CAAMC,WAAS,EAACtF,MAAO,CAACuF,WAAY,OAAQrF,QAAS,OAAQsF,cAAe,UAA5E,SACI,eAACjG,GAAD,CAAaO,QAASsF,EAAavE,YAAa,yBAEpD,eAACwE,GAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,EAAzB,SAEQlH,EAAUc,KAAI,SAAAZ,GACV,IAAIiH,EAAmB3I,EAAM0B,EAAG/E,IAEhC,OAAO,eAAC2L,GAAA,EAAD,CAAM/H,MAAI,EAAV,SACH,eAACqI,GAAA,EAAD,CAAO3F,MAAO,CAAC4F,QAAS,QAAxB,SACI,eAAC/C,GAAD,CACInJ,GAAI+E,EAAG/E,GACPF,MAAOiF,EAAGjF,MACV4F,OAAQX,EAAGW,OACXhB,aAAcK,EAAGL,aACjBrB,MAAO2I,EACP3D,WAAYA,EACZmB,aAAcA,EACdH,QAASA,EACTZ,iBAAkB+C,EAClB1B,eAAgBA,EAChBhB,gBAAiBA,EACjBQ,oBAAqBA,EACrBF,KAAMA,OAfKrE,EAAG/E,YAX/B,eAAC,KAAD,CAAUmM,GAAI,Y,sECpFhBC,GAAe,SAAC7J,GAAD,OAA6BA,EAAM4H,IAAIpJ,QACtDsL,GAAsB,SAAC9J,GAAD,OAA6BA,EAAM4H,IAAIjH,eAC7DoJ,GAAc,SAAC/J,GAAD,OAA6BA,EAAM4H,IAAItJ,OCI5D0L,GAAQzG,IAAM0G,YAAuC,SACvDxG,EAAOyG,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAK9F,QAAQ,UAAaX,OAGrD2G,GAAgB,WACzB,IAAM9L,EAAQ8J,GAA8BiC,EAAaN,aACnD5L,EAAW2K,cACXwB,EAAmB,OAAVhM,EAETiM,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJtM,EAASE,EAAc,CAACC,MAAO,SAGnC,OACI,eAACoM,GAAA,EAAD,CAAUC,KAAML,EAAQM,iBAAkB,IAAMC,QAASN,EAAzD,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAAC1D,MAAO,QAA1D,SACK/I,O,wCCRJ0M,GAAQ,WACjB,IAAMnL,EAAauI,GAAwBS,EAAcN,kBACnDpK,EPK0B2K,cOH1BmC,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMpM,EAA0B,GAWhC,OAVKoM,EAAOJ,MAEA,4CAA4CK,KAAKD,EAAOJ,SAChEhM,EAAOgM,MAAQ,yBAFfhM,EAAOgM,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAAS1M,OAAS,IAChCS,EAAOiM,SAAW,6BAFlBjM,EAAOiM,SAAW,WAIfjM,GAEXsM,SAAS,WAAD,4BAAE,WAAOF,EAAQG,GAAf,mBAAA3M,EAAA,sEACeb,EAASS,EAAQ4M,IADhC,OACAvL,EADA,OAEFrB,EAAQgN,SAASC,MAAM5L,IACvB,UAAIA,EAAOC,eAAX,OAAI,EAAgBb,eACVf,EAAQ2B,EAAOC,QAAQb,aAAa,GAC1CsM,EAAcG,cAAcxN,EAAMyN,MAAOzN,EAAMA,QAGvD2M,EAAOe,YARD,2CAAF,qDAAC,KAYb,OAAInM,EACO,eAAC,KAAD,CAAU+J,GAAI,MAElB,eAACR,GAAA,EAAD,CAAMC,WAAS,EAAC7C,eAAgB,SAAhC,SACH,eAAC4C,GAAA,EAAD,CAAM/H,MAAI,EAACmF,eAAgB,SAA3B,SACI,gBAACyF,GAAA,EAAD,WACI,gBAAC7C,GAAA,EAAD,CAAM8C,UAAY,OAAlB,UACI,0DACI,oBAAGC,KAAM,wCACNC,OAAQ,SADX,sBAIJ,yEACA,2DACA,mDAGJ,uBAAMV,SAAUT,EAAOoB,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,eAACnI,GAAA,EAAD,aACIQ,MAAM,QACN6C,OAAO,UACHyD,EAAOsB,cAAc,WAG5BtB,EAAOuB,QAAQpB,OAASH,EAAO7L,OAAOgM,OACnC,sBAAKrH,MAAO,CAACgB,MAAO,OAApB,SAA6BkG,EAAO7L,OAAOgM,QAE/C,eAACjH,GAAA,EAAD,aACIsI,KAAK,WACL9H,MAAM,WACN6C,OAAO,UACHyD,EAAOsB,cAAc,cAI5BtB,EAAOuB,QAAQnB,UAAYJ,EAAO7L,OAAOiM,UACtC,sBAAKtH,MAAO,CAACgB,MAAO,OAApB,SAA6BkG,EAAO7L,OAAOiM,WAE/C,eAACqB,GAAA,EAAD,CACI/H,MAAO,cACPgI,QAAS,eAACjG,GAAA,EAAD,aAAUT,QAASgF,EAAOO,OAAOF,YACnBL,EAAOsB,cAAc,kBAGhD,eAAC9E,GAAA,EAAD,CAAQgF,KAAM,SAAUrI,QAAS,YAAaW,MAAO,UAArD,gC,iGCjGX6H,GAAmBC,aAAOC,KAAPD,EAAe,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CAC3D1F,MAAO,GACP2F,OAAQ,GACRrD,QAAS,EACT,0BAA2B,CACvBnC,OAAQ,EACRmC,QAAS,EACTsD,UAAW,kBACX,gBAAiB,CACblI,MAAO,OACPkI,UAAW,mBACX,4BAA6B,CACzBC,gBAAgB,gIAAD,OAAiIC,mBAC5I,QADW,qIAInB,uBAAwB,CACpBC,QAAS,EACTC,gBAAwC,SAAvBN,EAAMO,QAAQC,KAAkB,UAAY,aAIzE,qBAAsB,CAClBF,gBAAwC,SAAvBN,EAAMO,QAAQC,KAAkB,UAAY,UAC7DlG,MAAO,GACP2F,OAAQ,GACR,WAAY,CACRQ,QAAS,KACTC,SAAU,WACVpG,MAAO,OACP2F,OAAQ,OACRU,KAAM,EACNC,IAAK,EACLC,iBAAkB,YAClBC,mBAAoB,SACpBX,gBAAgB,gIAAD,OAAiIC,mBAC5I,QADW,imBAKvB,qBAAsB,CAClBC,QAAS,EACTC,gBAAwC,SAAvBN,EAAMO,QAAQC,KAAkB,UAAY,UAC7DO,aAAc,Q,UC4CPC,OA9Df,YAAyC,IAAD,IAA1BlH,YAA0B,SACpC,EAAwBnD,mBAAsB,SAA9C,mBAAO6J,EAAP,KAAaS,EAAb,KACMC,EAAY1K,IAAM2K,SACpB,iBAAO,CACHC,gBAAiB,WACbH,GAAQ,SAACI,GAAD,MACS,UAAbA,EAAuB,OAAS,eAI5C,IAEErB,EAAQxJ,IAAM2K,SAAQ,kBAAMG,aCtCP,SAACd,GAAD,MAAwB,CACnDD,QAAQ,aACJC,QACa,UAATA,EACE,CAEEe,QAASC,KACTC,UAAWC,KACXC,QAASH,KAAK,KACdI,KAAM,CACFL,QAASM,KAAK,KACdJ,UAAWI,KAAK,OAGtB,CAEEN,QAASO,KACTH,QAASG,KAAW,KACpBC,WAAY,CACRC,QAASC,KAAM,KACfC,MAAOD,KAAM,MAEjBL,KAAM,CACFL,QAAS,OACTE,UAAWI,KAAK,SDccM,CAAgB3B,MAAQ,CAACA,IAEjE/O,EAAS4J,GAAkCyB,IAC3ClJ,EAAgByH,GAAwB0B,IACxCjK,EAAauI,GAAwBS,EAAcN,kBACnDpK,EAAW2K,cAEjBC,qBAAU,WACN5K,EAASuC,OACV,IAEH,IAAMyO,EAAgBtJ,uBAAY,WAC9B1H,EAASoB,OACV,CAACpB,IAEJ,OAAKwC,EAOG,gBAACyO,GAAA,EAAD,CAAerC,MAAOA,EAAtB,UACI,eAACsC,GAAA,EAAD,IACA,uBAAK5I,UAAU,MAAf,UACI,eAAC6I,GAAA,EAAD,CAAQ7B,SAAS,SAAjB,SACI,gBAAC8B,GAAA,EAAD,CAASxL,MAAO,CAACyC,eAAgB,iBAAjC,UACI,eAACoG,GAAD,CAAoBtI,SAAU,SAACC,GAAD,OAAO0J,EAAUE,qBAC/C,eAACqB,GAAA,EAAD,CAAYpL,QAAQ,KAApB,yBAGCvE,GACG,eAAC4H,GAAA,EAAD,CAAQxC,QAASkK,EAAepK,MAAM,UAAUX,QAAS,WAAzD,0BAGA,YAAX5F,GAAwB,eAACiR,GAAA,EAAD,CAAgB1K,MAAM,cAC/C,eAAC2K,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,KAAM,IAAKC,QAAS,eAAC,GAAD,CAAehJ,KAAMA,MAChD,eAAC,KAAD,CAAO+I,KAAM,SAAUC,QAAS,eAAC,GAAD,MAChC,eAAC,KAAD,CAAOD,KAAM,OAAQC,QAAS,qBAAI9L,MAAO,CAACuD,UAAW,UAAvB,8BAC9B,eAAC,KAAD,CAAOsI,KAAM,IAAKC,QAAS,eAAC,KAAD,CAAUjG,GAAI,gBAGjD,eAAC,GAAD,UA5BL,sBACH7F,MAAO,CAAC0J,SAAU,QAASE,IAAK,MAAOrG,UAAW,SAAUD,MAAO,QADhE,SAEH,eAACyI,GAAA,EAAD,O,SEhDZC,IAASC,OACL,eAAC,KAAD,UACI,eAAC,IAAD,CAAUlI,MAAOA,GAAjB,SACI,eAAC,GAAD,QAGRmI,SAASC,eAAe,SAO5B5T,M","file":"static/js/main.fcd37365.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c60f2b97-0895-4cf3-876d-7125b63d21d8'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ id: number }>>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, login: string, email: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type FieldErrorType = {field: string, error: string}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {AppActionsType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppActionsType>, message: string) => {\r\n    dispatch(setAppErrorAC({error: message}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    dispatch(setAppErrorAC(data.messages.length ? {error: data.messages[0]} : {error: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {\r\n    addTodolistTC,\r\n    clearDataLogoutAC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC\r\n} from '../../todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"../../../../app/store\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// thunks\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasksTC', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    try {\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error.message)\r\n    }\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTaskTC', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({status: 'loading', taskId: param.taskId, todoId: param.todolistId}))\r\n    try {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error.message)\r\n    }\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTaskTC', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(dispatch, error.message)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTaskTC', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {param}\r\n        } else {\r\n            handleServerAppError(thunkAPI.dispatch, res.data)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error.message)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n\r\n})\r\n\r\n// reducer\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ status: RequestStatusType, taskId: string, todoId: string }>) {\r\n            const tasks = state[action.payload.todoId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index].entityStatus = action.payload.status\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n        });\r\n        builder.addCase(clearDataLogoutAC, (state, action) => {\r\n            return {}\r\n        });\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            }\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const index = state[action.payload.todolistId].findIndex(t => t.id === action.payload!.taskId)\r\n                if (index > -1) {\r\n                    state[action.payload.todolistId].splice(index, 1)\r\n                }\r\n            }\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            }\r\n        });\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.param.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.param.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.param.domainModel}\r\n            }\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTaskEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\nenum ResultCodeStatuses {\r\n    'success' = 0,\r\n    'error' = 1,\r\n    'captcha' = 10\r\n}\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearDataLogoutAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\n// thunks\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/loginTC', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(thunkAPI.dispatch, res.data);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logoutTC', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(clearDataLogoutAC())\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(thunkAPI.dispatch, res.data);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n//reducer\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        });\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n\r\n\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeAppTC', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'loading' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport type AppActionsType = SetAppStatusType | SetAppErrorType\r\nexport type InitialStateType = ReturnType<typeof slice.getInitialState>\r\ntype SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\ntype SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./Todolist/Task/tasks-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolistsTC', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        const todos = {todolists: res.data}\r\n        todos.todolists.forEach(tl => dispatch(fetchTasksTC(tl.id)))\r\n        return todos\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(dispatch, error.message)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolistTC', async (param: { todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodoEntityStatusAC({status: 'loading', id: param.todolistId}))\r\n    try {\r\n        await todolistsAPI.deleteTodolist(param.todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: param.todolistId}\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(dispatch, error.message)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolistTC', async (param: { title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            return rejectWithValue(({}))\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(dispatch, error.message)\r\n        return rejectWithValue(({}))\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitleTC', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: AxiosError | any) {\r\n        handleServerNetworkError(dispatch, error.message)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodoEntityStatusAC(state, action: PayloadAction<{ status: RequestStatusType, id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        clearDataLogoutAC() {\r\n            return []\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n        });\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        });\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n\r\nexport const {\r\n    changeTodolistFilterAC, changeTodoEntityStatusAC, clearDataLogoutAC\r\n} = slice.actions\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    placeholder?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div style={{marginBottom: '10px', display: 'flex', alignItems: 'center'}}>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={props.placeholder}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"secondary\" size={\"large\"} onClick={addItem} disabled={props.disabled}>\r\n            <AddBox fontSize={\"inherit\"}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled ?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        props.disabled ? setEditMode(false) : setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} variant={'standard'} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id}\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\"\r\n                }}\r\n                className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === \"loading\"}\r\n        />\r\n\r\n        <EditableSpan disabled={props.task.entityStatus === 'loading'} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n            <Delete color={'primary'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div style={{width: 'fit-content', textAlign: 'center'}}>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}\r\n                          disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton disabled={props.entityStatus === 'loading'} onClick={removeTodolist}>\r\n                <Delete color={'primary'}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'} placeholder={'Title'}/>\r\n        <div>\r\n            {tasksForTodolist.length ?\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n                : <p style={{margin: '10px'}}>No tasks</p>\r\n            }\r\n        </div>\r\n        <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistsList/Todolist/Task/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer';\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n\r\n","import {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists;\r\n\r\n","import {AppRootStateType} from \"../../../../app/store\";\r\n\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './Todolist/Task/tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {authSelectors} from \"../login\";\r\nimport {todolistSelectors} from \"./index\";\r\nimport {taskSelectors} from \"./Todolist/Task\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector<Array<TodolistDomainType>>(todolistSelectors.selectTodolists)\r\n    const tasks = useAppSelector<TasksStateType>(taskSelectors.selectTasks)\r\n    const isLoggedIn = useAppSelector<boolean>(authSelectors.selectIsLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId: id, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel: {title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        const thunk = removeTodolistTC({todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC({title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{paddingTop: '20px', display: 'flex', flexDirection: 'column'}}>\r\n            <AddItemForm addItem={addTodolist} placeholder={'Add new To do List'}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {AppRootStateType} from \"./store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\nexport const selectError = (state: AppRootStateType) => state.app.error;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\nimport {appSelectors} from \"../../app\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useAppSelector<string | null>(appSelectors.selectError)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {authSelectors} from \"./index\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useAppSelector<boolean>(authSelectors.selectIsLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Must be 3 symbols or more'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <Grid marginTop ={'20px'}>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </Grid>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox checked={formik.values.rememberMe}\r\n                                               {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as React from 'react';\r\nimport {styled} from '@mui/material/styles';\r\nimport Switch from '@mui/material/Switch';\r\n\r\nexport const MaterialUISwitch = styled(Switch)(({ theme }) => ({\r\n    width: 62,\r\n    height: 34,\r\n    padding: 7,\r\n    '& .MuiSwitch-switchBase': {\r\n        margin: 1,\r\n        padding: 0,\r\n        transform: 'translateX(6px)',\r\n        '&.Mui-checked': {\r\n            color: '#fff',\r\n            transform: 'translateX(22px)',\r\n            '& .MuiSwitch-thumb:before': {\r\n                backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\r\n                    '#fff',\r\n                )}\" d=\"M4.2 2.5l-.7 1.8-1.8.7 1.8.7.7 1.8.6-1.8L6.7 5l-1.9-.7-.6-1.8zm15 8.3a6.7 6.7 0 11-6.6-6.6 5.8 5.8 0 006.6 6.6z\"/></svg>')`,\r\n            },\r\n            '& + .MuiSwitch-track': {\r\n                opacity: 1,\r\n                backgroundColor: theme.palette.mode === 'dark' ? '#8796A5' : '#aab4be',\r\n            },\r\n        },\r\n    },\r\n    '& .MuiSwitch-thumb': {\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#003892' : '#001e3c',\r\n        width: 32,\r\n        height: 32,\r\n        '&:before': {\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            left: 0,\r\n            top: 0,\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\r\n                '#fff',\r\n            )}\" d=\"M9.305 1.667V3.75h1.389V1.667h-1.39zm-4.707 1.95l-.982.982L5.09 6.072l.982-.982-1.473-1.473zm10.802 0L13.927 5.09l.982.982 1.473-1.473-.982-.982zM10 5.139a4.872 4.872 0 00-4.862 4.86A4.872 4.872 0 0010 14.862 4.872 4.872 0 0014.86 10 4.872 4.872 0 0010 5.139zm0 1.389A3.462 3.462 0 0113.471 10a3.462 3.462 0 01-3.473 3.472A3.462 3.462 0 016.527 10 3.462 3.462 0 0110 6.528zM1.665 9.305v1.39h2.083v-1.39H1.666zm14.583 0v1.39h2.084v-1.39h-2.084zM5.09 13.928L3.616 15.4l.982.982 1.473-1.473-.982-.982zm9.82 0l-.982.982 1.473 1.473.982-.982-1.473-1.473zM9.305 16.25v2.083h1.389V16.25h-1.39z\"/></svg>')`,\r\n        },\r\n    },\r\n    '& .MuiSwitch-track': {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#8796A5' : '#aab4be',\r\n        borderRadius: 20 / 2,\r\n    },\r\n}));","import React, {useCallback, useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {useAppSelector} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from \"../features/login/Login\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CircularProgress, PaletteMode, ThemeProvider} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\nimport {selectIsInitialized, selectStatus} from './selectors';\r\nimport {authSelectors} from \"../features/login\";\r\nimport {createTheme} from \"@material-ui/core/styles\";\r\nimport {getDesignTokens} from '../utils/theme';\r\nimport {MaterialUISwitch} from '../utils/switchMode';\r\nimport {CssBaseline} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const [mode, setMode] = useState<PaletteMode>('light');\r\n    const colorMode = React.useMemo(\r\n        () => ({\r\n            toggleColorMode: () => {\r\n                setMode((prevMode: PaletteMode) =>\r\n                    prevMode === 'light' ? 'dark' : 'light',\r\n                );\r\n            },\r\n        }),\r\n        [],\r\n    );\r\n    const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\r\n\r\n    const status = useAppSelector<RequestStatusType>(selectStatus)\r\n    const isInitialized = useAppSelector<boolean>(selectIsInitialized)\r\n    const isLoggedIn = useAppSelector<boolean>(authSelectors.selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <div className=\"App\">\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                            <MaterialUISwitch   onChange={(e) => colorMode.toggleColorMode()}/>\r\n                            <Typography variant=\"h6\">\r\n                                To do Lists\r\n                            </Typography>\r\n                            {isLoggedIn &&\r\n                                <Button onClick={logoutHandler} color=\"inherit\" variant={\"outlined\"}>Log out</Button>}\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n                    <Container fixed>\r\n                        <Routes>\r\n                            <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                            <Route path={'/login'} element={<Login/>}/>\r\n                            <Route path={'/404'} element={<h1 style={{textAlign: 'center'}}>404: NOT FOUND</h1>}/>\r\n                            <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                        </Routes>\r\n                    </Container>\r\n                    <ErrorSnackbar/>\r\n                </div>\r\n            </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {PaletteMode} from \"@mui/material\";\r\nimport {amber, brown, deepOrange, grey, lime, purple} from \"@mui/material/colors\";\r\n\r\nexport const getDesignTokens = (mode: PaletteMode) => ({\r\n    palette: {\r\n        mode,\r\n        ...(mode === 'light'\r\n            ? {\r\n                // palette values for light mode\r\n                primary: lime,\r\n                secondary: purple,\r\n                divider: lime[500],\r\n                text: {\r\n                    primary: grey[900],\r\n                    secondary: grey[800],\r\n                },\r\n            }\r\n            : {\r\n                // palette values for dark mode\r\n                primary: deepOrange,\r\n                divider: deepOrange[700],\r\n                background: {\r\n                    default: brown[500],\r\n                    paper: brown[900],\r\n                },\r\n                text: {\r\n                    primary: '#fff',\r\n                    secondary: grey[600],\r\n                },\r\n            }),\r\n    },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\nimport {CssBaseline} from \"@material-ui/core\";\nimport {createTheme, ThemeProvider} from \"@material-ui/core/styles\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}